worker_processes 2
timeout 60

preload_app true
check_client_connection false

# We cannot control where unicorn.rb is but
# we know that working_directory and `Dir.pwd` will always be the
# root of the application
require 'pathname'
required_module_path = Pathname.new(Dir.pwd()) + "lib/gitlab/cluster/lifecycle_events"
require_relative required_module_path.to_s

before_exec do |server|
  Gitlab::Cluster::LifecycleEvents.signal_master_restart
end

before_fork do |server, worker|
  Gitlab::Cluster::LifecycleEvents.signal_before_fork

  # The following is only recommended for memory/DB-constrained
  # installations.  It is not needed if your system can house
  # twice as many worker_processes as you have configured.
  #
  # This allows a new master process to incrementally
  # phase out the old master process with SIGTTOU to avoid a
  # thundering herd (especially in the "preload_app false" case)
  # when doing a transparent upgrade.  The last worker spawned
  # will then kill off the old master process with a SIGQUIT.
  old_pid = "#{server.config[:pid]}.oldbin"
  if old_pid != server.pid
    begin
      sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
      Process.kill(sig, File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
    end
  end
  #
  # Throttle the master from forking too quickly by sleeping.  Due
  # to the implementation of standard Unix signal handlers, this
  # helps (but does not completely) prevent identical, repeated signals
  # from being lost when the receiving process is busy.
  # sleep 1
end

after_fork do |server, worker|
  Gitlab::Cluster::LifecycleEvents.signal_worker_start

  # per-process listener ports for debugging/admin/migrations
  # addr = "127.0.0.1:#{9293 + worker.nr}"
  # server.listen(addr, :tries => -1, :delay => 5, :tcp_nopush => true)
end

