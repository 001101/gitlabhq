/* eslint-disable func-names, space-before-function-paren, consistent-return, no-var, no-undef, no-else-return, prefer-arrow-callback, padded-blocks, max-len */
// Syntax Highlighter
//
// Applies a syntax highlighting color scheme CSS class to any element with the
// `js-syntax-highlight` class
//
// ### Example Markup
//
//   <div class="js-syntax-highlight"></div>
//
(function() {
  // CSS and JS for KaTeX
  var CSS_PATH = "<%= asset_path('katex.css') %>";
  var JS_PATH = "<%= asset_path('katex.js') %>";

  // Only load once
  var katexLoaded = false;

  // Loop over all math elements and render math
  var renderWithKaTeX = function (elements) {
    elements.each(function () {
      var mathNode = $( "<span></span>" );
      var $this = $(this);

      var display = $this.attr('data-math-style') === 'display';
      try {
        katex.render($this.text(), mathNode.get(0), { displayMode: display });
        mathNode.insertAfter($this);
        $this.remove();
      } catch (err) {
        // What can we do??
        console.log(err.message);
      }
    })
  };
  var handleMath = function () {
    var mathElements = $('.code.math');

    if (mathElements.length === 0) return;

    if (katexLoaded) renderWithKaTeX(mathElements);
    else {
      // Request CSS file so it is in the cache
      $.get(CSS_PATH, function(){
        var css = $('<link>',
            {rel:'stylesheet',
              type:'text/css',
              href: CSS_PATH
            });
        css.appendTo('head');

        // Load KaTeX js
        $.getScript(JS_PATH, function() {
          katexLoaded = true;
          renderWithKaTeX(mathElements); // Run KaTeX
        })
      });
    }
  };

  $.fn.syntaxHighlight = function() {
    var $children;

    handleMath();

    if ($(this).hasClass('js-syntax-highlight')) {
      // Given the element itself, apply highlighting
      return $(this).addClass(gon.user_color_scheme);
    } else {
      // Given a parent element, recurse to any of its applicable children
      $children = $(this).find('.js-syntax-highlight');
      if ($children.length) {
        return $children.syntaxHighlight();
      }
    }
  };

  $(document).on('ready page:load', function() {
    return $('.js-syntax-highlight').syntaxHighlight();
  });

}).call(this);
